#!/bin/bash

# Start All Services Script Template
# This script starts all the services for the Gov Subsidy Platform
# Copy this to start-all-services.sh and fill in your credentials

set -e

echo "Starting all services for Gov Subsidy Platform..."

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# SECURITY: Set your environment variables here or in a .env file
if [ -f ".env" ]; then
    echo "Loading environment variables from .env file..."
    source .env
fi

# DO NOT commit actual credentials to git!
SUPABASE_URL="${SUPABASE_URL:-YOUR_SUPABASE_PROJECT_URL}"
SUPABASE_SERVICE_ROLE_KEY="${SUPABASE_SERVICE_ROLE_KEY:-YOUR_SUPABASE_SERVICE_ROLE_KEY}"

# Validate environment variables are set
if [ "$SUPABASE_URL" = "YOUR_SUPABASE_PROJECT_URL" ] || [ "$SUPABASE_SERVICE_ROLE_KEY" = "YOUR_SUPABASE_SERVICE_ROLE_KEY" ]; then
    echo -e "${RED}ERROR: Please set your Supabase credentials in environment variables:${NC}"
    echo -e "${YELLOW}   export SUPABASE_URL='https://your-project.supabase.co'${NC}"
    echo -e "${YELLOW}   export SUPABASE_SERVICE_ROLE_KEY='your-service-role-key'${NC}"
    echo -e "${BLUE}TIP: Or copy this template to start-all-services.sh and edit the credentials${NC}"
    exit 1
fi

# Function to check if a port is available
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${RED}ERROR: Port $port is already in use${NC}"
        return 1
    else
        echo -e "${GREEN}OK: Port $port is available${NC}"
        return 0
    fi
}

# Function to start a service in the background
start_service() {
    local name=$1
    local dir=$2
    local command=$3
    local port=$4
    
    echo -e "\n${BLUE}Starting $name on port $port...${NC}"
    
    cd "$dir"
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}Installing dependencies for $name...${NC}"
        npm install
    fi
    
    # Start the service in background
    $command &
    local pid=$!
    
    # Store PID for cleanup
    echo $pid > "/tmp/gov-subsidy-$name.pid"
    
    echo -e "${GREEN}$name started with PID: $pid${NC}"
    
    # Go back to root directory
    cd - > /dev/null
}

# Cleanup function to kill all services
cleanup() {
    echo -e "\n${YELLOW}Stopping all services...${NC}"
    
    # Kill processes by PID files
    for service in frontend backend-zk backend-lhdn; do
        pid_file="/tmp/gov-subsidy-$service.pid"
        if [ -f "$pid_file" ]; then
            pid=$(cat "$pid_file")
            if kill -0 $pid 2>/dev/null; then
                kill $pid
                echo -e "${GREEN}Stopped $service (PID: $pid)${NC}"
            fi
            rm -f "$pid_file"
        fi
    done
    
    echo -e "${GREEN}All services stopped${NC}"
    exit 0
}

# Trap Ctrl+C and call cleanup function
trap cleanup SIGINT SIGTERM

# Check if we're in the right directory
if [ ! -f "CLAUDE.md" ]; then
    echo -e "${RED}ERROR: Please run this script from the gov-subsidy-platform root directory${NC}"
    exit 1
fi

echo -e "${BLUE}Checking port availability...${NC}"

# Check if ports are available
check_port 5173 # Frontend (Vite)
check_port 3001 # Mock LHDN API
check_port 3002 # ZK Circuit Service

echo -e "\n${GREEN}All ports are available. Starting services...${NC}"

# Start Frontend (Vite dev server - port 5173)
start_service "frontend" "frontend" "npm run dev" "5173"

# Start Mock LHDN API (port 3001)
start_service "backend-lhdn" "backend/mock-lhdn-api" "npm run dev" "3001"

# Start ZK Circuit Service (port 3002) with environment variables
start_zk_service() {
    local name="backend-zk"
    local dir="backend/zk-service"
    local port="3002"
    
    echo -e "\n${BLUE}Starting $name on port $port...${NC}"
    
    cd "$dir"
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}Installing dependencies for $name...${NC}"
        npm install
    fi
    
    # Check if .env file exists, create it with template if not
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}Creating .env file for $name...${NC}"
        cat > ".env" << EOF
SUPABASE_URL=$SUPABASE_URL
SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
EOF
        echo -e "${GREEN}.env file created${NC}"
    fi
    
    # Start the service with environment variables (secure method)
    SUPABASE_URL="$SUPABASE_URL" \
    SUPABASE_SERVICE_ROLE_KEY="$SUPABASE_SERVICE_ROLE_KEY" \
    npm run dev &
    local pid=$!
    
    # Store PID for cleanup
    echo $pid > "/tmp/gov-subsidy-$name.pid"
    
    echo -e "${GREEN}$name started with PID: $pid${NC}"
    echo -e "${GREEN}Environment variables set securely${NC}"
    
    # Go back to root directory
    cd - > /dev/null
}

# Start ZK Circuit Service with proper environment setup
start_zk_service

# Wait a moment for services to start
echo -e "\n${YELLOW}Waiting for services to initialize...${NC}"
sleep 5

# Enhanced service health validation with retry logic
validate_service_health() {
    local service_name=$1
    local url=$2
    local max_retries=6
    local retry_delay=3
    
    echo -e "\n${BLUE}Validating $service_name...${NC}"
    
    for ((i=1; i<=max_retries; i++)); do
        if curl -s "$url" > /dev/null 2>&1; then
            echo -e "${GREEN}$service_name is responding correctly${NC}"
            return 0
        else
            if [ $i -eq $max_retries ]; then
                echo -e "${RED}ERROR: $service_name failed to start after $max_retries attempts${NC}"
                echo -e "${YELLOW}TIP: Check logs above for startup errors${NC}"
                return 1
            else
                echo -e "${YELLOW}Attempt $i/$max_retries: $service_name not ready, retrying in ${retry_delay}s...${NC}"
                sleep $retry_delay
            fi
        fi
    done
}

# Validate all services
echo -e "\n${BLUE}Running health checks...${NC}"

# Check Frontend
validate_service_health "Frontend" "http://localhost:5173"

# Check Mock LHDN API
validate_service_health "Mock LHDN API" "http://localhost:3001/health"

# Check ZK Service (test the migration endpoint specifically)
validate_service_health "ZK Service" "http://localhost:3002"

# Test specific ZK migration endpoint
echo -e "\n${BLUE}Testing ZK migration endpoint...${NC}"
if curl -s -X POST http://localhost:3002/api/profile/update-with-zk \
   -H "Content-Type: application/json" \
   -d '{}' > /dev/null 2>&1; then
    echo -e "${GREEN}ZK migration endpoint is accessible${NC}"
else
    echo -e "${YELLOW}WARNING: ZK migration endpoint validation skipped (requires valid data)${NC}"
fi

echo -e "\n${GREEN}All services started successfully!${NC}"
echo -e "\n${BLUE}Service URLs:${NC}"
echo -e "  • Frontend:        ${GREEN}http://localhost:5173${NC}"
echo -e "  • Mock LHDN API:   ${GREEN}http://localhost:3001${NC}"
echo -e "  • ZK Service:      ${GREEN}http://localhost:3002${NC}"
echo -e "  • ZK Swagger Docs: ${GREEN}http://localhost:3002/api-docs${NC}"

echo -e "\n${YELLOW}Tips:${NC}"
echo -e "  • Press Ctrl+C to stop all services"
echo -e "  • Check logs above for any startup errors"
echo -e "  • Frontend hot-reload is enabled"
echo -e "  • ZK Service now uses secure backend API for database operations"
echo -e "  • Test the complete flow: Frontend → ZK Verification → Backend Storage"

echo -e "\n${BLUE}Services are running... Press Ctrl+C to stop all services${NC}"

# Wait for all background processes
wait